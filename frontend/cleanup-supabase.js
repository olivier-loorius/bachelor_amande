// Script de nettoyage des donn√©es Supabase
// √Ä ex√©cuter pour avoir un dashboard vide comme pour une premi√®re utilisation

import { createClient } from '@supabase/supabase-js'

// Remplacer par vos vraies cl√©s Supabase
const supabaseUrl = 'VOTRE_URL_SUPABASE'
const supabaseKey = 'VOTRE_CLE_SUPABASE'

const supabase = createClient(supabaseUrl, supabaseKey)

async function cleanupSupabase() {
  try {
    console.log('üßπ D√©but du nettoyage des donn√©es Supabase...')
    
    // Supprimer toutes les donn√©es de la table products (si elle existe)
    const { error: productsError } = await supabase
      .from('products')
      .delete()
      .neq('id', 0) // Supprimer tous les enregistrements
    
    if (productsError) {
      console.log('‚ÑπÔ∏è Table products non trouv√©e ou d√©j√† vide')
    } else {
      console.log('‚úÖ Table products nettoy√©e')
    }
    
    // Supprimer toutes les donn√©es de la table product_configs (si elle existe)
    const { error: configsError } = await supabase
      .from('product_configs')
      .delete()
      .neq('id', 0)
    
    if (configsError) {
      console.log('‚ÑπÔ∏è Table product_configs non trouv√©e ou d√©j√† vide')
    } else {
      console.log('‚úÖ Table product_configs nettoy√©e')
    }
    
    // Supprimer toutes les donn√©es de la table fonds (si elle existe)
    const { error: fondsError } = await supabase
      .from('fonds')
      .delete()
      .neq('id', 0)
    
    if (fondsError) {
      console.log('‚ÑπÔ∏è Table fonds non trouv√©e ou d√©j√† vide')
    } else {
      console.log('‚úÖ Table fonds nettoy√©e')
    }
    
    // Nettoyer le localStorage du navigateur
    console.log('üßπ Nettoyage du localStorage...')
    localStorage.removeItem('amande_product_config')
    console.log('‚úÖ localStorage nettoy√©')
    
    console.log('üéâ Nettoyage termin√© ! Dashboard pr√™t pour une premi√®re utilisation.')
    
  } catch (error) {
    console.error('‚ùå Erreur lors du nettoyage:', error)
  }
}

// Ex√©cuter le nettoyage
cleanupSupabase()


